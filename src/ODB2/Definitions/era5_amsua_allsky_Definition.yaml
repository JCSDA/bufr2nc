---
#
# yaml IODA import configuration file for ECMWF era5
# reports, importing the amsu-a data therein.
#
# This yaml file is designed as input for the ioda-converters
# python script odbapi2nc.py.
#
# Use for ECMWF era5 all-sky report types:
# e.g. 21004, 21005, 21007, 21009, etc.
#
# Do not use for Met Office reports, or era5 non-all-sky reports.
#

###########################################################
##
## Section 1 -
## Defines how to retrieve needed variables from the 
## source ODB2 file
##
## There are four ways a variable value might be retrieved:
##    - column_variables
##    - vertco_variables
##    - varno_variables
##    - varno_vertco_variables
##
## These four types are described below.
###########################################################

# column_variables are read from a specific ODB2 column
#
# Format: <key: value> = <variable name: column name>
#
# NOTE: analysis_date_time (from andate & antime columns) and
# date_time (from date & time columns) variables are always read and
# do not need to be specified here.
column_variables:
    longitude: lon
    latitude: lat
    satellite_id: satellite_identifier
    sensor_zenith_angle: zenith
    solar_zenith_angle: solar_zenith
    scan_position: scanpos

# vertco_variables are read from the vertco_reference_1 column
# when the vertco_type column has the specified value.
#
# Format: <key: value> = <variable name: vertco_type value>
vertco_variables:
    sensor_channel: 3

# varno_variables are read from the obsvalue, obs_error, and
# QC columns when the varno column has the specified value.
#
# Insert string "USE_VERTCO" to define a varno_vertco variable.
# Also ensure that the desired vertco_type number is listed
# in the vertco_variables section above.
#
# Format: <key: value> = <varno value: variable name>
varno_variables:
    119: USE_VERTCO

# varno_vertco_variables are read from the obsvalue, obs_error, and
# QC columns when the varno column has a value with "USE_VERTCO"
# defined above and the vertco_reference_1 column has the value
# specified below.
#
# Format: <key: <key: value>> = <varno value, <vertco_reference_1 value: variable name>>
varno_vertco_variables:
    119:
      4: brightness_temperature_4
      5: brightness_temperature_5

###########################################################
##
## Section 2 -
## Defines how data will be organized in the output IODA 
## netCDF file
##
## Every variable used in section 2 must be defined in
## section 1. (Except analysis_date_time and date_time.)
##
###########################################################

# The count of ioda_variables below will be 'nvars' in IODA.
#
# Format: list of variable names
ioda_variables:
    - brightness_temperature_4
    - brightness_temperature_5

# Every unique combination of record_key field values defines
# a new IODA record.
#
# Format: <key: value> = <variable name: variable data type>
record_key:
  analysis_date_time: string
  satellite_id: integer

# Every unique combination of location_key field values defines
# a new IODA location.
# (The number of unique combinations will be 'nlocs' in IODA.)
#
# Format: <key: value> = <variable name: variable data type>
# TODO: Location keys can be over-defined right now. They include
# ALL location metadata. Any reason to break
# out the minimal key fields into a different category?
# doing so just makes the underlying code more complex.
location_key:
  latitude: float
  longitude: float
  datetime: string
  sensor_zenith_angle: float
  solar_zenith_angle: float
  scan_position: integer

...
